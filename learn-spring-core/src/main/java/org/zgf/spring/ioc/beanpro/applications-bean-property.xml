<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
	
	<!-- 1.1 构造器注入：  constructor-arg 没有name属性, spring 会自动进行类型转换-->
	<bean id="computerBean11" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<constructor-arg value="lenovo-Y470" />
		<constructor-arg value="5000.0" />
	</bean>
	
	<!-- 1.2构造器注入：  constructor-arg 可以通过index 属性指定参数位置, 从0 开始  -->
	<bean id="computerBean12" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<constructor-arg index="0" value="Lenovo-Y470"/>
		<constructor-arg index="1" value="5000.0"/>
	</bean>
	
	<!-- 1.3 构造器注入： 注入其他Bean  -->
	<bean id="computerBean13" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<constructor-arg ref="computerBean11"/>
	</bean>
	
	<!-- 2.1属性注入：name 为属性名称. 注意：此种情况必须有无参构造函数， 和属性相应的set 方法 -->
	<bean id="computerBean21" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<property name="name" value="lenovo-Y470"/>
		<property name="price" value="5000.0"/>
	</bean>
	
	<!-- 2.2属性注入：name 为属性名称. 注意：此种情况必须有无参构造函数， 和属性相应的set 方法 -->
	<bean id="computerBean22" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<property name="listKeys">
			<array>
				<value>F1</value>
				<value>F2</value>
				<value>F3</value>
			</array>
		</property>
	</bean>
	
	<!-- 2.3属性注入：List 需要有需要有无参构造方法 -->
	<bean id="computerBean23" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<property name="listKeys">
			<list>
				<value>F1</value>
				<value>F2</value>
				<value>F3</value>
				<value>F..</value>
			</list>
		</property>
	</bean>
	
	<!-- 2.4属性注入：Set 需要有需要有无参构造方法-->
	<bean id="computerBean24" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<property name="setKeys">
			<set>
				<value>F1</value>
				<value>F2</value>
				<value>F3</value>
				<value>F..</value>
			</set>
		</property>
	</bean>
	
	<!-- 2.5属性注入：Map 需要有需要有无参构造方法-->
	<bean id="computerBean25" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<property name="mapKey">
			<map>
				<entry key="A" value="aaa"/>
				<entry key="B" value="bbb"/>
				<entry key="C" value="ccc"/>
			</map>
		</property>
	</bean>
	
	<!-- 2.6属性注入：Properties 需要有需要有无参构造方法-->
	<bean id="computerBean26" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<property name="properties">
			<props>
				<prop key="A">aaaa</prop>
				<prop key="B">bbbb</prop>
				<prop key="C">cccc</prop>
			</props>
		</property>
	</bean>
	
	<bean id="monitorBean" class="org.zgf.spring.ioc.beanpro.MonitorBean">
		<property name="name" value="Dell"/>
		<property name="price" value="5000"/>
	</bean>
	
	<!-- 2.7属性注入：JavaBean -->
	<!-- ref 引用已定义Bean   -->
	<bean id="computerBean27" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<property name="monitor" ref="monitorBean"/>
	</bean>
	
	<!-- 2.8 内部Bean , 内部bean 无id ,所以不能被获取到或者被其它bean 引用-->
	<bean id="computerBean28" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<property name="monitor" >
			<bean class="org.zgf.spring.ioc.beanpro.MonitorBean">
				<property name="name" value="Lenovo"/>
				<property name="price" value="1000"/>
			</bean>
		</property>
	</bean>
	
	<!-- 2.9 自动注入： autowire： byName 根据变量名称注入 ， byType：根据变量类型注入
		缺点：如果有多个JavaBean属性, 那么只能指定一种方式，不能为不同的属性指定不同的注入方式
	 -->
	<bean id="computerBean29" class="org.zgf.spring.ioc.beanpro.ComputerBean" autowire="byType"/>
	
	
	<!-- 3.  Spring 提供了一个PropertyPlaceholderConfigurer的BeanFactory 后置处理器， 这个后置处理器允许用户将Bean 配置的内容外移到属性文件中
		    location: 指定外部配置文件位置, 使用方式 ${var}  -->
	<context:property-placeholder location="classpath:org/zgf/spring/ioc/beanpro/computer.properties"/>
	<bean id="computerBean3" class="org.zgf.spring.ioc.beanpro.ComputerBean">
		<property name="name" value="${computer.name}"/>
		<property name="price" value="${computer.price}"/>
	</bean>
	
	<!-- 4.  P命名空间的使用 :Spring 提供了P命名空间，目的是简化Bean 的属性配置 , 注意需要引入P的命名空间-->
	<bean id="computerBean4" class="org.zgf.spring.ioc.beanpro.ComputerBean"  p:name="lenovo-Y470" p:price="1000.0"/>
	
</beans>
